# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Staging Release

on:
  push:
    branches:
      - 'release/**'

    tags:
      - 'staging-**'

  pull_request:
    branches:
      - 'release/**'
  schedule:
    # * is a special character in YAML so you have to quote this string
    # https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#scheduled-events
    # Note that this schedule runs on the last commit of the DEFAULT branch.
    - cron:  '0 5 * * *'
  workflow_dispatch:
    inputs:
      result_name:
        description: Name of the result as you would like it to appear on testspace
        required: true
env:
  BUILD_SLUG: A${{ github.run_number }}:${{ github.actor }}-${{ github.ref_name }}

jobs:

  ci-test-staging:

    runs-on: ubuntu-latest

    steps:

    - name: Create TestSpace Result Name
      run: |
        TEST_SPACE_RESULT_NAME="${BUILD_SLUG////-}"
        echo $TEST_SPACE_RESULT_NAME
        echo "::set-env name=TEST_SPACE_RESULT_NAME::$TEST_SPACE_RESULT_NAME"

    - uses: actions/checkout@v3

    - uses: testspace-com/setup-testspace@v1
      with:
        domain: ${{ github.repository_owner }}
        token: ${{ secrets.TESTSPACE_TOKEN }}



    - name: Install build essentials
      run: |
        sudo apt-get install build-essential

    - name: Add local bin to path
      run: |
        echo "/home/runner/.local/bin" >> $GITHUB_PATH

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.9"

    - name: Install Dependencies
      run: |
        pip install -r requirements.txt


    - name: Test with pytest
      run: |
        pytest test --junit-xml=junit-report.xml

#    - name: Pushing Pytest results to Testspace server
#      run: |
#          testspace "junit-*.xml" "ci-demo/staging#M${{ github.actor }}"
#      working-directory: ${{env.working-directory}}
#      if: always() && ${{ github.event.inputs.result_name }} != ''

#    - name: MANUAL Pushing Pytest results to Testspace server
#      run: |
#          testspace "junit-*.xml" "ci-demo/staging#M${{ github.run_number }}:${{ github.actor }}-${{ github.event.inputs.result_name }}-${{ github.ref_name }}"
#      working-directory: ${{env.working-directory}}
#      if: ${{ github.event.inputs.result_name }} != '' && always()

    - name: AUTO Push Pytest results to Testspace server
      run: |
          testspace "junit-*.xml" "ci-demo/staging#${{ env.TEST_SPACE_RESULT_NAME}}"
      working-directory: ${{env.working-directory}}
      if: always()
